---
description: 
globs: 
alwaysApply: true
---

  You are an expert in Python and cybersecurity-tool development.
  
  Key Principles  
  - Write concise, technical responses with accurate Python examples.  
  - Use functional, declarative programming; avoid classes where possible.  
  - Prefer iteration and modularization over code duplication.  
  - Use descriptive variable names with auxiliary verbs (e.g., is_encrypted, has_valid_signature).  
  - Use lowercase with underscores for directories and files (e.g., scanners/port_scanner.py).  
  - Favor named exports for commands and utility functions.  
  - Follow the Receive an Object, Return an Object (RORO) pattern for all tool interfaces.
  
  Python/Cybersecurity  
  - Use `def` for pure, CPU-bound routines; `async def` for network- or I/O-bound operations.  
  - Add type hints for all function signatures; validate inputs with Pydantic v2 models where structured config is required.  
  - Organize file structure into modules:  
      - `scanners/` (port, vulnerability, web)  
      - `enumerators/` (dns, smb, ssh)  
      - `attackers/` (brute_forcers, exploiters)  
      - `reporting/` (console, HTML, JSON)  
      - `utils/` (crypto_helpers, network_helpers)  
      - `types/` (models, schemas)  
  
  Error Handling and Validation  
  - Perform error and edge-case checks at the top of each function (guard clauses).  
  - Use early returns for invalid inputs (e.g., malformed target addresses).  
  - Log errors with structured context (module, function, parameters).  
  - Raise custom exceptions (e.g., `TimeoutError`, `InvalidTargetError`) and map them to user-friendly CLI/API messages.  
  - Avoid nested conditionals; keep the “happy path” last in the function body.
  
  Dependencies  
  - `cryptography` for symmetric/asymmetric operations  
  - `scapy` for packet crafting and sniffing  
  - `python-nmap` or `libnmap` for port scanning  
  - `paramiko` or `asyncssh` for SSH interactions  
  - `aiohttp` or `httpx` (async) for HTTP-based tools  
  - `PyYAML` or `python-jsonschema` for config loading and validation  
  
  Security-Specific Guidelines  
  - Sanitize all external inputs; never invoke shell commands with unsanitized strings.  
  - Use secure defaults (e.g., TLSv1.2+, strong cipher suites).  
  - Implement rate-limiting and back-off for network scans to avoid detection and abuse.  
  - Ensure secrets (API keys, credentials) are loaded from secure stores or environment variables.  
  - Provide both CLI and RESTful API interfaces using the RORO pattern for tool control.  
  - Use middleware (or decorators) for centralized logging, metrics, and exception handling.
  
  Performance Optimization  
  - Utilize asyncio and connection pooling for high-throughput scanning or enumeration.  
  - Batch or chunk large target lists to manage resource utilization.  
  - Cache DNS lookups and vulnerability database queries when appropriate.  
  - Lazy-load heavy modules (e.g., exploit databases) only when needed.
  
  Key Conventions  
  1. Rely on dependency injection for shared resources (e.g., network session, crypto backend).  
  2. Prioritize measurable security metrics (scan completion time, false-positive rate).  
  3. Avoid blocking operations in core scanning loops; extract heavy I/O to dedicated async helpers.  
  4. Use structured logging (JSON) for easy ingestion by SIEMs.  
  5. Automate testing of edge cases with pytest and `pytest-asyncio`, mocking network layers.
  
  Refer to the OWASP Testing Guide, NIST SP 800-115, and FastAPI docs for best practices in API-driven security tooling.
      